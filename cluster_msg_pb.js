/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.cluster.msg.ClusterMembers', null, global);
goog.exportSymbol('proto.cluster.msg.ClusterMsgType', null, global);
goog.exportSymbol('proto.cluster.msg.DataMsg', null, global);
goog.exportSymbol('proto.cluster.msg.DataType', null, global);
goog.exportSymbol('proto.cluster.msg.HostPort', null, global);
goog.exportSymbol('proto.cluster.msg.JoinCluster', null, global);
goog.exportSymbol('proto.cluster.msg.RejectJoin', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cluster.msg.HostPort = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cluster.msg.HostPort, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cluster.msg.HostPort.displayName = 'proto.cluster.msg.HostPort';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cluster.msg.HostPort.prototype.toObject = function(opt_includeInstance) {
  return proto.cluster.msg.HostPort.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cluster.msg.HostPort} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cluster.msg.HostPort.toObject = function(includeInstance, msg) {
  var f, obj = {
    host: jspb.Message.getField(msg, 1),
    port: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cluster.msg.HostPort}
 */
proto.cluster.msg.HostPort.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cluster.msg.HostPort;
  return proto.cluster.msg.HostPort.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cluster.msg.HostPort} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cluster.msg.HostPort}
 */
proto.cluster.msg.HostPort.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cluster.msg.HostPort} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cluster.msg.HostPort.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cluster.msg.HostPort.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cluster.msg.HostPort.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getHost();
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getPort();
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cluster.msg.HostPort} The clone.
 */
proto.cluster.msg.HostPort.prototype.cloneMessage = function() {
  return /** @type {!proto.cluster.msg.HostPort} */ (jspb.Message.cloneMessage(this));
};


/**
 * required string host = 1;
 * @return {string}
 */
proto.cluster.msg.HostPort.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 1));
};


/** @param {string|undefined} value  */
proto.cluster.msg.HostPort.prototype.setHost = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.cluster.msg.HostPort.prototype.clearHost = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * required int32 port = 2;
 * @return {number}
 */
proto.cluster.msg.HostPort.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.cluster.msg.HostPort.prototype.setPort = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.cluster.msg.HostPort.prototype.clearPort = function() {
  jspb.Message.setField(this, 2, undefined);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cluster.msg.JoinCluster = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cluster.msg.JoinCluster, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cluster.msg.JoinCluster.displayName = 'proto.cluster.msg.JoinCluster';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cluster.msg.JoinCluster.prototype.toObject = function(opt_includeInstance) {
  return proto.cluster.msg.JoinCluster.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cluster.msg.JoinCluster} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cluster.msg.JoinCluster.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    clusterName: jspb.Message.getField(msg, 2),
    member: (f = msg.getMember()) && proto.cluster.msg.HostPort.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cluster.msg.JoinCluster}
 */
proto.cluster.msg.JoinCluster.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cluster.msg.JoinCluster;
  return proto.cluster.msg.JoinCluster.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cluster.msg.JoinCluster} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cluster.msg.JoinCluster}
 */
proto.cluster.msg.JoinCluster.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.cluster.msg.ClusterMsgType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClusterName(value);
      break;
    case 3:
      var value = new proto.cluster.msg.HostPort;
      reader.readMessage(value,proto.cluster.msg.HostPort.deserializeBinaryFromReader);
      msg.setMember(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cluster.msg.JoinCluster} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cluster.msg.JoinCluster.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cluster.msg.JoinCluster.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cluster.msg.JoinCluster.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getType();
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getClusterName();
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getMember();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cluster.msg.HostPort.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cluster.msg.JoinCluster} The clone.
 */
proto.cluster.msg.JoinCluster.prototype.cloneMessage = function() {
  return /** @type {!proto.cluster.msg.JoinCluster} */ (jspb.Message.cloneMessage(this));
};


/**
 * required ClusterMsgType type = 1;
 * @return {!proto.cluster.msg.ClusterMsgType}
 */
proto.cluster.msg.JoinCluster.prototype.getType = function() {
  return /** @type {!proto.cluster.msg.ClusterMsgType} */ (jspb.Message.getField(this, 1));
};


/** @param {proto.cluster.msg.ClusterMsgType|undefined} value  */
proto.cluster.msg.JoinCluster.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.cluster.msg.JoinCluster.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * required string cluster_name = 2;
 * @return {string}
 */
proto.cluster.msg.JoinCluster.prototype.getClusterName = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 2));
};


/** @param {string|undefined} value  */
proto.cluster.msg.JoinCluster.prototype.setClusterName = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.cluster.msg.JoinCluster.prototype.clearClusterName = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * required HostPort member = 3;
 * @return {!proto.cluster.msg.HostPort}
 */
proto.cluster.msg.JoinCluster.prototype.getMember = function() {
  return /** @type{!proto.cluster.msg.HostPort} */ (
    jspb.Message.getWrapperField(this, proto.cluster.msg.HostPort, 3, 1));
};


/** @param {proto.cluster.msg.HostPort|undefined} value  */
proto.cluster.msg.JoinCluster.prototype.setMember = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.cluster.msg.JoinCluster.prototype.clearMember = function() {
  this.setMember(undefined);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cluster.msg.ClusterMembers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cluster.msg.ClusterMembers.repeatedFields_, null);
};
goog.inherits(proto.cluster.msg.ClusterMembers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cluster.msg.ClusterMembers.displayName = 'proto.cluster.msg.ClusterMembers';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cluster.msg.ClusterMembers.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cluster.msg.ClusterMembers.prototype.toObject = function(opt_includeInstance) {
  return proto.cluster.msg.ClusterMembers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cluster.msg.ClusterMembers} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cluster.msg.ClusterMembers.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    membersList: jspb.Message.toObjectList(msg.getMembersList(),
    proto.cluster.msg.HostPort.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cluster.msg.ClusterMembers}
 */
proto.cluster.msg.ClusterMembers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cluster.msg.ClusterMembers;
  return proto.cluster.msg.ClusterMembers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cluster.msg.ClusterMembers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cluster.msg.ClusterMembers}
 */
proto.cluster.msg.ClusterMembers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.cluster.msg.ClusterMsgType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.cluster.msg.HostPort;
      reader.readMessage(value,proto.cluster.msg.HostPort.deserializeBinaryFromReader);
      msg.getMembersList().push(value);
      msg.setMembersList(msg.getMembersList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cluster.msg.ClusterMembers} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cluster.msg.ClusterMembers.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cluster.msg.ClusterMembers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cluster.msg.ClusterMembers.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getType();
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.cluster.msg.HostPort.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cluster.msg.ClusterMembers} The clone.
 */
proto.cluster.msg.ClusterMembers.prototype.cloneMessage = function() {
  return /** @type {!proto.cluster.msg.ClusterMembers} */ (jspb.Message.cloneMessage(this));
};


/**
 * required ClusterMsgType type = 1;
 * @return {!proto.cluster.msg.ClusterMsgType}
 */
proto.cluster.msg.ClusterMembers.prototype.getType = function() {
  return /** @type {!proto.cluster.msg.ClusterMsgType} */ (jspb.Message.getField(this, 1));
};


/** @param {proto.cluster.msg.ClusterMsgType|undefined} value  */
proto.cluster.msg.ClusterMembers.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.cluster.msg.ClusterMembers.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * repeated HostPort members = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.cluster.msg.HostPort>}
 */
proto.cluster.msg.ClusterMembers.prototype.getMembersList = function() {
  return /** @type{!Array.<!proto.cluster.msg.HostPort>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cluster.msg.HostPort, 2));
};


/** @param {Array.<!proto.cluster.msg.HostPort>|undefined} value  */
proto.cluster.msg.ClusterMembers.prototype.setMembersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.cluster.msg.ClusterMembers.prototype.clearMembersList = function() {
  this.setMembersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cluster.msg.RejectJoin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cluster.msg.RejectJoin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cluster.msg.RejectJoin.displayName = 'proto.cluster.msg.RejectJoin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cluster.msg.RejectJoin.prototype.toObject = function(opt_includeInstance) {
  return proto.cluster.msg.RejectJoin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cluster.msg.RejectJoin} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cluster.msg.RejectJoin.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    reason: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cluster.msg.RejectJoin}
 */
proto.cluster.msg.RejectJoin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cluster.msg.RejectJoin;
  return proto.cluster.msg.RejectJoin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cluster.msg.RejectJoin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cluster.msg.RejectJoin}
 */
proto.cluster.msg.RejectJoin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.cluster.msg.ClusterMsgType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cluster.msg.RejectJoin} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cluster.msg.RejectJoin.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cluster.msg.RejectJoin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cluster.msg.RejectJoin.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getType();
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getReason();
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cluster.msg.RejectJoin} The clone.
 */
proto.cluster.msg.RejectJoin.prototype.cloneMessage = function() {
  return /** @type {!proto.cluster.msg.RejectJoin} */ (jspb.Message.cloneMessage(this));
};


/**
 * required ClusterMsgType type = 1;
 * @return {!proto.cluster.msg.ClusterMsgType}
 */
proto.cluster.msg.RejectJoin.prototype.getType = function() {
  return /** @type {!proto.cluster.msg.ClusterMsgType} */ (jspb.Message.getField(this, 1));
};


/** @param {proto.cluster.msg.ClusterMsgType|undefined} value  */
proto.cluster.msg.RejectJoin.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.cluster.msg.RejectJoin.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * optional string reason = 2;
 * @return {string?}
 */
proto.cluster.msg.RejectJoin.prototype.getReason = function() {
  return /** @type {string?} */ (jspb.Message.getField(this, 2));
};


/** @param {string?|undefined} value  */
proto.cluster.msg.RejectJoin.prototype.setReason = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.cluster.msg.RejectJoin.prototype.clearReason = function() {
  jspb.Message.setField(this, 2, undefined);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cluster.msg.DataMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cluster.msg.DataMsg.repeatedFields_, null);
};
goog.inherits(proto.cluster.msg.DataMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cluster.msg.DataMsg.displayName = 'proto.cluster.msg.DataMsg';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cluster.msg.DataMsg.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cluster.msg.DataMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.cluster.msg.DataMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cluster.msg.DataMsg} msg The msg instance to transform.
 * @return {!Object}
 */
proto.cluster.msg.DataMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    senderHost: jspb.Message.getField(msg, 2),
    senderPort: jspb.Message.getField(msg, 3),
    senderPathsList: jspb.Message.getField(msg, 4),
    receiverPathsList: jspb.Message.getField(msg, 5),
    dataType: jspb.Message.getField(msg, 6),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cluster.msg.DataMsg}
 */
proto.cluster.msg.DataMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cluster.msg.DataMsg;
  return proto.cluster.msg.DataMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cluster.msg.DataMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cluster.msg.DataMsg}
 */
proto.cluster.msg.DataMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.cluster.msg.ClusterMsgType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderHost(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSenderPort(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.getSenderPathsList().push(value);
      msg.setSenderPathsList(msg.getSenderPathsList());
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.getReceiverPathsList().push(value);
      msg.setReceiverPathsList(msg.getReceiverPathsList());
      break;
    case 6:
      var value = /** @type {!proto.cluster.msg.DataType} */ (reader.readEnum());
      msg.setDataType(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.cluster.msg.DataMsg} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.cluster.msg.DataMsg.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cluster.msg.DataMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.cluster.msg.DataMsg.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getType();
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getSenderHost();
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getSenderPort();
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getSenderPathsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = this.getReceiverPathsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = this.getDataType();
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = this.getData_asU8();
  if (f != null) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.cluster.msg.DataMsg} The clone.
 */
proto.cluster.msg.DataMsg.prototype.cloneMessage = function() {
  return /** @type {!proto.cluster.msg.DataMsg} */ (jspb.Message.cloneMessage(this));
};


/**
 * required ClusterMsgType type = 1;
 * @return {!proto.cluster.msg.ClusterMsgType}
 */
proto.cluster.msg.DataMsg.prototype.getType = function() {
  return /** @type {!proto.cluster.msg.ClusterMsgType} */ (jspb.Message.getField(this, 1));
};


/** @param {proto.cluster.msg.ClusterMsgType|undefined} value  */
proto.cluster.msg.DataMsg.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.cluster.msg.DataMsg.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * required string sender_host = 2;
 * @return {string}
 */
proto.cluster.msg.DataMsg.prototype.getSenderHost = function() {
  return /** @type {string} */ (jspb.Message.getField(this, 2));
};


/** @param {string|undefined} value  */
proto.cluster.msg.DataMsg.prototype.setSenderHost = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.cluster.msg.DataMsg.prototype.clearSenderHost = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * required int32 sender_port = 3;
 * @return {number}
 */
proto.cluster.msg.DataMsg.prototype.getSenderPort = function() {
  return /** @type {number} */ (jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.cluster.msg.DataMsg.prototype.setSenderPort = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.cluster.msg.DataMsg.prototype.clearSenderPort = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * repeated string sender_paths = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.cluster.msg.DataMsg.prototype.getSenderPathsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 4));
};


/** @param {Array.<string>|undefined} value  */
proto.cluster.msg.DataMsg.prototype.setSenderPathsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


proto.cluster.msg.DataMsg.prototype.clearSenderPathsList = function() {
  jspb.Message.setField(this, 4, []);
};


/**
 * repeated string receiver_paths = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.cluster.msg.DataMsg.prototype.getReceiverPathsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 5));
};


/** @param {Array.<string>|undefined} value  */
proto.cluster.msg.DataMsg.prototype.setReceiverPathsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


proto.cluster.msg.DataMsg.prototype.clearReceiverPathsList = function() {
  jspb.Message.setField(this, 5, []);
};


/**
 * required DataType data_type = 6;
 * @return {!proto.cluster.msg.DataType}
 */
proto.cluster.msg.DataMsg.prototype.getDataType = function() {
  return /** @type {!proto.cluster.msg.DataType} */ (jspb.Message.getField(this, 6));
};


/** @param {proto.cluster.msg.DataType|undefined} value  */
proto.cluster.msg.DataMsg.prototype.setDataType = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.cluster.msg.DataMsg.prototype.clearDataType = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * optional bytes data = 7;
 * @return {(string|Uint8Array)}
 */
proto.cluster.msg.DataMsg.prototype.getData = function() {
  return /** @type {(string|Uint8Array)} */ (jspb.Message.getField(this, 7));
};


/**
 * optional bytes data = 7;
 * This is a type-conversion wrapper around `getData()`
 * @return {string?}
 */
proto.cluster.msg.DataMsg.prototype.getData_asB64 = function() {
  return /** @type {string?} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {Uint8Array}
 */
proto.cluster.msg.DataMsg.prototype.getData_asU8 = function() {
  return /** @type {Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {(string|Uint8Array)|undefined} value  */
proto.cluster.msg.DataMsg.prototype.setData = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.cluster.msg.DataMsg.prototype.clearData = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * @enum {number}
 */
proto.cluster.msg.ClusterMsgType = {
  JOIN_CLUSTER: 0,
  REJECT_JOIN_CLUSTER: 1,
  LEFT_CLUSTER: 2,
  CLUSTER_MEMBERS: 3,
  SEND_MSG: 4
};

/**
 * @enum {number}
 */
proto.cluster.msg.DataType = {
  STRING: 0,
  INT_32: 1,
  INT_64: 2,
  FLOAT: 3,
  DOUBLE: 4,
  BYTES: 5,
  OBJECT: 6
};

goog.object.extend(exports, proto.cluster.msg);
